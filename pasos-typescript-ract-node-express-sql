Gu√≠a paso a paso, detallada y estructurada, para crear una aplicaci√≥n b√°sica pero completa de **lista de tareas (ToDo App)** usando **TypeScript**, con:

* **Frontend:** React + TypeScript
* **Backend:** Node.js + Express + TypeScript
* **Base de datos:** MySQL con Sequelize (ORM)

El proyecto incluir√° las funcionalidades CRUD completas:

* Crear tarea
* Ver todas las tareas
* Ver una tarea por ID
* Editar/actualizar tarea
* Borrar tarea

---

## üìÅ Estructura general del proyecto

```
todo-app/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ app.ts
‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îú‚îÄ‚îÄ components/
‚îÇ       ‚îú‚îÄ‚îÄ pages/
‚îÇ       ‚îî‚îÄ‚îÄ App.tsx
```

---

## üß† Parte 1: Configurar el Backend (Node.js + TypeScript + Express + Sequelize + MySQL)

### 1.1. Inicializa el proyecto

```bash
mkdir backend && cd backend
npm init -y
```

### 1.2. Instala dependencias

```bash
npm install express sequelize mysql2 cors dotenv
npm install -D typescript ts-node-dev @types/express @types/node
```

### 1.3. Crea el archivo `tsconfig.json`

```bash
npx tsc --init
```

Edita `tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true
  }
}
```

### 1.4. Estructura b√°sica de carpetas y archivos

```bash
mkdir -p src/{controllers,routes,models,database}
touch src/app.ts
```

---

## üì¶ Parte 2: Base de Datos con Sequelize y MySQL

### 2.1. Conexi√≥n a la base de datos

Archivo: `src/database/index.ts`

```ts
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

export const sequelize = new Sequelize(
  process.env.DB_NAME!,
  process.env.DB_USER!,
  process.env.DB_PASSWORD!,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
  }
);
```

Archivo `.env`

```
DB_NAME=todoapp
DB_USER=root
DB_PASSWORD=tu_contrase√±a
DB_HOST=localhost
PORT=3001
```

### 2.2. Modelo Sequelize: `Task`

Archivo: `src/models/Task.ts`

```ts
import { DataTypes } from 'sequelize';
import { sequelize } from '../database';

export const Task = sequelize.define('Task', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  title: {
    type: DataTypes.STRING,
    allowNull: false
  },
  completed: {
    type: DataTypes.BOOLEAN,
    defaultValue: false
  }
});
```

---

## üîß Parte 3: L√≥gica de la API

### 3.1. Controlador `TaskController`

Archivo: `src/controllers/taskController.ts`

```ts
import { Request, Response } from 'express';
import { Task } from '../models/Task';

export const getAllTasks = async (req: Request, res: Response) => {
  const tasks = await Task.findAll();
  res.json(tasks);
};

export const getTask = async (req: Request, res: Response) => {
  const task = await Task.findByPk(req.params.id);
  if (task) res.json(task);
  else res.status(404).json({ error: 'Task not found' });
};

export const createTask = async (req: Request, res: Response) => {
  const { title } = req.body;
  const task = await Task.create({ title });
  res.status(201).json(task);
};

export const updateTask = async (req: Request, res: Response) => {
  const task = await Task.findByPk(req.params.id);
  if (task) {
    await task.update(req.body);
    res.json(task);
  } else {
    res.status(404).json({ error: 'Task not found' });
  }
};

export const deleteTask = async (req: Request, res: Response) => {
  const task = await Task.findByPk(req.params.id);
  if (task) {
    await task.destroy();
    res.json({ message: 'Task deleted' });
  } else {
    res.status(404).json({ error: 'Task not found' });
  }
};
```

---

### 3.2. Rutas de la API

Archivo: `src/routes/taskRoutes.ts`

```ts
import express from 'express';
import {
  getAllTasks, getTask, createTask, updateTask, deleteTask
} from '../controllers/taskController';

const router = express.Router();

router.get('/tasks', getAllTasks);
router.get('/tasks/:id', getTask);
router.post('/tasks', createTask);
router.put('/tasks/:id', updateTask);
router.delete('/tasks/:id', deleteTask);

export default router;
```

---

### 3.3. App principal

Archivo: `src/app.ts`

```ts
import express from 'express';
import cors from 'cors';
import taskRoutes from './routes/taskRoutes';
import { sequelize } from './database';
import { Task } from './models/Task';

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());
app.use('/api', taskRoutes);

sequelize.sync().then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
});
```

---

## üíª Parte 4: Frontend con React + TypeScript

### 4.1. Crear proyecto

```bash
cd ..
npx create-react-app frontend --template typescript
cd frontend
npm install axios
```

---

### 4.2. Crear componentes

#### `TaskList.tsx`

```tsx
import { useEffect, useState } from 'react';
import axios from 'axios';

interface Task {
  id: number;
  title: string;
  completed: boolean;
}

export const TaskList = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState('');

  const loadTasks = async () => {
    const res = await axios.get('http://localhost:3001/api/tasks');
    setTasks(res.data);
  };

  useEffect(() => {
    loadTasks();
  }, []);

  const createTask = async () => {
    await axios.post('http://localhost:3001/api/tasks', { title: newTask });
    setNewTask('');
    loadTasks();
  };

  const deleteTask = async (id: number) => {
    await axios.delete(`http://localhost:3001/api/tasks/${id}`);
    loadTasks();
  };

  const toggleTask = async (task: Task) => {
    await axios.put(`http://localhost:3001/api/tasks/${task.id}`, {
      completed: !task.completed,
    });
    loadTasks();
  };

  return (
    <div>
      <h2>To-Do List</h2>
      <input value={newTask} onChange={e => setNewTask(e.target.value)} />
      <button onClick={createTask}>Add</button>
      <ul>
        {tasks.map(task => (
          <li key={task.id}>
            <span
              style={{ textDecoration: task.completed ? 'line-through' : '' }}
              onClick={() => toggleTask(task)}
            >
              {task.title}
            </span>
            <button onClick={() => deleteTask(task.id)}>‚ùå</button>
          </li>
        ))}
      </ul>
    </div>
  );
};
```

#### `App.tsx`

```tsx
import React from 'react';
import { TaskList } from './components/TaskList';

function App() {
  return (
    <div style={{ padding: '20px' }}>
      <TaskList />
    </div>
  );
}

export default App;
```

---

## ‚úÖ Funcionalidades implementadas

| Acci√≥n      | M√©todo HTTP | Ruta             |
| ----------- | ----------- | ---------------- |
| Crear tarea | POST        | `/api/tasks`     |
| Ver todas   | GET         | `/api/tasks`     |
| Ver una     | GET         | `/api/tasks/:id` |
| Actualizar  | PUT         | `/api/tasks/:id` |
| Eliminar    | DELETE      | `/api/tasks/:id` |

---

## üöÄ Para correr el proyecto

### Backend

```bash
cd backend
npx ts-node-dev src/app.ts
```

### Frontend

```bash
cd frontend
npm start
```

---

